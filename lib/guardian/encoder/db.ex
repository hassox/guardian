defmodule Guardian.Encoder.Db do
  @moduledoc false
  @behaviour Guardian.ClaimValidation

  use Guardian.ClaimValidation

  def validate_claim(_, _, _), do: :ok

  defmodule Token do
    @moduledoc """
    A very simple model for storing tokens generated by guardian.
    """

    use Ecto.Schema
    @primary_key {:jti, :string, autogenerate: false }
    @schema_name Keyword.get(Application.get_env(:guardian, Guardian), :schema_name) || "guardian_tokens"
    @schema_prefix Keyword.get(Application.get_env(:guardian, Guardian), :schema_prefix) || nil

    import Ecto.Changeset
    import Ecto.Query

    schema @schema_name do
      field :typ, :string
      field :aud, :string
      field :iss, :string
      field :sub, :string
      field :exp, :integer
      field :claims, :map

      timestamps()
    end

    @doc """
    Find one token by matching jti
    """
    def find_by_jti(jti) do
      Guardian.Encoder.Db.repo.get_by(Token, jti: jti)
    end

    @doc """
    Create a new new token based on the JWT and decoded claims
    """
    def create!(claims) do
      prepared_claims =
        claims
        |> Map.put("claims", claims)

      %Token{}
      |> cast(prepared_claims, [:jti, :typ, :aud, :iss, :sub, :exp, :claims])
      |> Guardian.Encoder.Db.repo.insert()
    end

    @doc """
    Purge any tokens that are expired. This should be done periodically to keep your DB table clean of clutter
    """
    def purge_expired_tokens! do
      timestamp = Guardian.Utils.timestamp
      from(t in Token, where: t.exp < ^timestamp) |> Guardian.Encoder.Db.repo.delete_all
    end
  end

  @spec encode_claims(map) :: {:ok, binary} | {:error, :token_storage_failure}
  def encode_claims(claims) do
    case Token.create!(claims) do
      {:error, _} -> {:error, :token_storage_failure}
      _           -> {:ok, claims["jti"]}
    end
  end

  @spec decode_token(binary, any) :: {:ok, map} | {:error, :token_not_found}
  def decode_token(jti, _secret) do
    case Token.find_by_jti(jti) do
      nil -> { :error, :token_not_found }
      token -> { :ok, token.claims }
    end
  end

  def repo do
    Map.get(Application.get_env(:guardian, Guardian), :repo)
  end
end
